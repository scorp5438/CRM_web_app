import React, { useState } from "react";
import { useUser } from "../utils/UserContext";
import { useNavigate } from "react-router-dom";
import { getCSRFToken, setCSRFToken } from "../utils/csrf";
import routes from "../utils/urls";
import "./authorization.css";
import LogoBig from "../../img/LogoBig.png"

const Authorization = () => {
    const navigate = useNavigate();
    const { setUser } = useUser();
    const [errorMessage, setErrorMessage] = useState("");
    const [isModalOpen, setIsModalOpen] = useState(false); // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º

    const handleSubmit = async (event) => {
        event.preventDefault();

        const username = event.target.username.value.trim();
        const password = event.target.password.value.trim();
        const errorBorder = document.querySelectorAll(".auth__input");
        if (!username || !password) {
            setErrorMessage("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏");
            errorBorder.forEach((element) => {
                element.classList.add("auth__error");
                setTimeout(() => element.classList.remove("auth__error"), 5000);
            });
            setTimeout(() => setErrorMessage(""), 5000);
            return;
        }

        const csrfToken = getCSRFToken();
        try {
            const response = await fetch(routes.login, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRFToken": csrfToken,
                },
                credentials: "include",
                body: JSON.stringify({ username, password }),
            });

            if (!response.ok) {
                const errorText = await response.text();
                if (response.status === 401) {
                    setErrorMessage("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
                    errorBorder.forEach((element) => {
                        element.classList.add("auth__error");
                        setTimeout(() => element.classList.remove("auth__error"), 5000);
                    });
                } else {
                    console.error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:", errorText);
                    setErrorMessage("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞");
                }
                setTimeout(() => setErrorMessage(""), 5000);
                return;
            }

            const data = await response.json();
            if (data.success) {
                if (data.csrfToken) {
                    setCSRFToken(data.csrfToken);
                }
                setUser(data.user);
                navigate(routes.main);
            } else {
                setErrorMessage("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
                setTimeout(() => setErrorMessage(""), 5000);
            }
        } catch {
            setErrorMessage("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞");
            setTimeout(() => setErrorMessage(""), 5000);
        }
    };

    const handleForgotPasswordClick = (e) => {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
        setIsModalOpen(true); // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    };

    const closeModal = () => {
        setIsModalOpen(false); // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    };

    return (
        <div className="auth center">
            <div className="auth__background">
                <div className="auth__modal">
                    <div className="auth__modal-header">
                        <img className="auth__modal-header_logo" src={LogoBig} alt="Logo"/>
                    </div>
                    <div className="auth__modal-body">
                        <h2 className="auth__modal-body_head">–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
                        <form method="POST" className="auth__form" onSubmit={handleSubmit}>
                            {errorMessage && <div className="error-message">{errorMessage}</div>}
                            <h3 className="auth__form_lable">–õ–æ–≥–∏–Ω</h3>
                            <input name="username" type="login" className="auth__input" placeholder="User" />
                            <h3 className="auth__form_lable">–ü–∞—Ä–æ–ª—å</h3>
                            <input name="password" type="password" className="auth__input" placeholder="Password" />
                            <button type="submit" className="auth__submit">–í–æ–π—Ç–∏</button>
                        </form>
                        <div className="auth__forgot-password">
                            <button className="auth__modal-body_link" onClick={handleForgotPasswordClick}>
                                –ó–∞–±—ã–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
            {isModalOpen && (
                <div className="modal">
                    <div className="modal-content">
                        <div className="modal-title">
                            <h2>–°–≥—É—â—ë–Ω–∫–∞ –∑–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç—å</h2>
                            <button className="modal-close" onClick={closeModal}>
                                &times;
                            </button>
                        </div>
                        <div className="modal-text">
                            <p>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∑–∞–Ω–µ—Å—Ç–∏
                                –ø–æ 2 –±–∞–Ω–∫–∏ —Å–≥—É—â—ë–Ω–∫–∏ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!
                                –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø–æ–¥–æ–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É (–ø–æ —Ñ–∞–∫—Ç—É —Å–æ–≥–ª–∞—Å–∏—è
                                –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –≤ IT-–æ—Ç–¥–µ–ª –∏ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—é)?</p>
                        </div>
                        <div className="modal-buttons">
                            <button title={"–ü—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç –∫–æ–≥–æ –∂–¥–∞—Ç—å —É–≥–æ—â–µ–Ω–∏—è üôÇ"} onClick={closeModal}>–î–∞</button>
                            <button title={"–ü—Ä–∏  –ù–ï —Å–æ–≥–ª–∞—Å–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫—Ç–æ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ñ–ê–î–ò–ù–ê üòí"} onClick={closeModal}>–ù–µ—Ç</button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Authorization;
